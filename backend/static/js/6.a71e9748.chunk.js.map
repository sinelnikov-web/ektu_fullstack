{"version":3,"sources":["../node_modules/react-uuid/uuid.js","components/ToolbarDateTime.tsx","utils/calendar.ts"],"names":["module","exports","hashTable","uuid","i","Math","floor","random","length","join","Calendar","loadable","ToolbarDateTimeStyled","styled","div","ToolbarDateTime","useState","initialized","setInitialized","year","setYear","minutes","setMinutes","hours","setHours","seconds","setSeconds","day","setDay","month","setMonth","Date","now","date","showCalendar","setShowCalendar","setCurrentDate","currentTime","currentYear","currentMonth","currentDay","currentHours","currentMinutes","currentSeconds","useEffect","setTimeout","className","tabIndex","onKeyUp","e","code","dateTime","onClick","prev","getMonthOffsetList","monthlist","curDate","getFullYear","getDate","firstDay","getDay","push","includes","getDayList","dayList","week","j","id","dayNumber","dayNameNumber","monthNumber","k","currentDate","toString","getMonth","getHours","getMinutes","getSeconds"],"mappings":"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","file":"static/js/6.a71e9748.chunk.js","sourcesContent":["/**\nA function that returns a universally unique identifier (uuid).  \nexample: 1b83fd69-abe7-468c-bea1-306a8aa1c81d\n@returns `string` : 32 character uuid (see example)\n*/\nfunction uuid() {\n  const hashTable = [\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9'\n  ]\n  let uuid = []\n  for (let i = 0; i < 35; i++) {\n    if (i === 7 || i === 12 || i === 17 || i === 22) {\n      uuid[i] = '-'\n    } else {\n      uuid[i] = hashTable[Math.floor(Math.random() * hashTable.length - 1)]\n    }\n  }\n  return uuid.join('')\n}\n\nmodule.exports = uuid\n","import React, {useEffect, useState} from 'react';\nimport styled from \"styled-components\";\nimport {currentTime} from \"../utils/calendar\";\nimport loadable from '@loadable/component'\n\nconst Calendar = loadable(() => import(\"./Calendar\"))\n\nconst ToolbarDateTime = () => {\n    const [initialized, setInitialized] = useState(false)\n    const [year, setYear] = useState<string>('0')\n    const [minutes, setMinutes] = useState<string>('0')\n    const [hours, setHours] = useState<string>('0')\n    const [seconds, setSeconds] = useState<string>('0')\n    const [day, setDay] = useState<string>('0')\n    const [month, setMonth] = useState<string>('0')\n    const [date, setDate] = useState<Date>(new Date(Date.now()))\n    const [showCalendar, setShowCalendar] = useState(false)\n\n    const setCurrentDate = () => {\n\n        const {\n            currentYear,\n            currentMonth, currentDay,\n            currentHours, currentMinutes, currentSeconds\n        } = currentTime()\n\n        setYear(currentYear)\n        setDay(currentDay.length === 2 ? currentDay : '0' + currentDay)\n        setMonth(currentMonth.length === 2 ? currentMonth : '0' + currentMonth)\n        setMinutes(currentMinutes.length === 2 ? currentMinutes : '0' + currentMinutes)\n        setHours(currentHours.length === 2 ? currentHours : '0' + currentHours)\n        setSeconds(currentSeconds.length === 2 ? currentSeconds : '0' + currentSeconds)\n        setInitialized(true)\n    }\n\n    useEffect(() => {\n\n        if (!initialized) {\n            setCurrentDate()\n        } else {\n            setTimeout(() => {\n                setCurrentDate()\n            }, 1000)\n        }\n    }, [seconds])\n\n    return (\n        <ToolbarDateTimeStyled className={'toolbar-datetime'}>\n            <div className=\"toolbar-icon-wrapper\">\n                <time tabIndex={0} onKeyUp={(e) => e.code === 'Enter' ? setShowCalendar(!showCalendar) : null}\n                      className={'toolbar-icon'} dateTime={'20'} onClick={() => setShowCalendar(prev => !prev)}>\n                    <div className=\"datetime_time\">\n                        <span>{hours + \":\" + minutes}</span>\n                    </div>\n                    <div className=\"datetime_date\">\n                        {day + '.' + month + '.' + year}\n                    </div>\n                </time>\n            </div>\n            {showCalendar && <Calendar date={date} hours={hours} minutes={minutes} seconds={seconds}/>}\n        </ToolbarDateTimeStyled>\n    );\n};\n\nconst ToolbarDateTimeStyled = styled.div`\n  color: var(--white-color);\n  text-align: center;\n  width: 100%;\n  height: 100%;\n\n  .toolbar-icon-wrapper {\n    padding: 0.5rem 0.5rem;\n    width: 100%;\n    height: 100%;\n\n    &:hover {\n      background-color: var(--toolbar-bg-color);\n      filter: brightness(140%);\n    }\n  }\n`\n\nexport default ToolbarDateTime;","// @ts-ignore\nimport uuid from 'react-uuid'\nimport {DayType} from \"../components/Calendar\";\n\nexport function getMonthOffsetList(date: Date) {\n    let monthlist: Array<number> = []\n    for (let i = 0; i < 12; i++) {\n        const curDate = new Date(date.getFullYear(), i, 0).getDate()\n        const firstDay = new Date(date.getFullYear(), i - 1, 1).getDay()\n        if (i === 0) {\n            monthlist.push(0)\n        } else {\n            if (curDate === 31 && [5, 6, 0].includes(firstDay)) {\n                monthlist.push(monthlist[i - 1] + 200)\n            } else if (curDate === 30 && [6, 0].includes(firstDay)) {\n                monthlist.push(monthlist[i - 1] + 200)\n            } else {\n                monthlist.push(monthlist[i - 1] + 160)\n            }\n        }\n    }\n    return monthlist\n}\n\n\nexport function getDayList(date: Date) {\n    let dayList: Array<Array<DayType>> = []\n    let week = 0\n    dayList.push([])\n    for (let i = 0; i < 12; i++) {\n        for (let j = 1; j <= new Date(date.getFullYear(), i + 1, 0).getDate(); j++) {\n            let day = {\n                id: uuid(),\n                dayNumber: j,\n                dayNameNumber: new Date(date.getFullYear(), i, j).getDay(),\n                monthNumber: i\n            }\n            if (dayList[week].length === 0 && day.dayNameNumber !== 1) {\n                if (day.dayNameNumber === 0) {\n                    for (let k = 1; k < 6; k++) {\n                        dayList[week].push({\n                            id: uuid(),\n                            dayNameNumber: k,\n                            dayNumber: 0,\n                            monthNumber: i\n                        })\n                    }\n                } else {\n                    for (let k = 0; k < day.dayNameNumber - 1; k++) {\n                        dayList[week].push({\n                            id: uuid(),\n                            dayNameNumber: k,\n                            dayNumber: 0,\n                            monthNumber: i\n                        })\n                    }\n                }\n            }\n            if (dayList[week].length < 7) {\n                dayList[week].push(day)\n            } else {\n                week++\n                dayList.push([day])\n            }\n\n        }\n    }\n    return dayList\n}\n\n\nexport function currentTime() {\n    const currentDate = new Date(Date.now())\n    const currentYear = currentDate.getFullYear().toString()\n    const currentMonth = (currentDate.getMonth() + 1).toString()\n    const currentDay = currentDate.getDate().toString()\n    const currentHours = currentDate.getHours().toString()\n    const currentMinutes = currentDate.getMinutes().toString()\n    const currentSeconds = currentDate.getSeconds().toString()\n\n    return {currentDate, currentYear, currentMonth, currentDay, currentHours, currentMinutes, currentSeconds}\n}"],"sourceRoot":""}