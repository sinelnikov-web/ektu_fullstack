{"version":3,"sources":["components/ChangeLanguage.tsx","components/ToolbarLanguage.tsx"],"names":["ChangeLanguageStyled","styled","div","ChangeLanguage","showLanguages","langMap","currentLanguage","reverseLangMap","setCurrentLanguage","useTranslation","t","fullLangNames","i18n","ru","kk","dispatch","useDispatch","className","Object","keys","map","langKey","index","onClick","lang","localStorage","setItem","changeLanguage","ToolbarLanguageStyled","ToolbarLanguage","useState","setShowLanguages","language","useSelector","languageSelector","useEffect","getItem","prev"],"mappings":"kLAoDMA,EAAuBC,IAAOC,IAAV,u6BAyDXC,EA9FuC,SAAC,GAMO,IALHC,EAKE,EALFA,cACAC,EAIE,EAJFA,QAEAC,GAEE,EAHFC,eAGE,EAFFD,iBACAE,EACE,EADFA,mBAGvD,EAAkBC,cAAXC,EAAP,EAAOA,EACDC,GADN,EAAUC,KACY,CAClBC,GAAIH,EAAE,8CACNI,GAAIJ,EAAE,4DAGJK,EAAWC,cAQjB,OACI,cAAChB,EAAD,CAAsBiB,UAAYb,EAA4B,GAAZ,UAAlD,SACKc,OAAOC,KAAKd,GAASe,KAAI,SAACC,EAASC,GAChC,OACI,sBAAKC,QAAS,kBAT1Bf,EADgBgB,EAU2BH,GAR3CI,aAAaC,QAAQ,kBAAmBF,QACxCT,EAASY,YAAeH,IAHT,IAACA,GAWCP,UAAW,kBAAoBX,IAAoBe,EAAU,UAAY,IAD9E,UAEI,qBAAKJ,UAAU,sBAAf,SAAqC,+BAAOZ,EAAQgB,OACpD,qBAAKJ,UAAU,sBAAf,SAAqC,+BAAON,EAAcU,SAHAC,S,QCc5EM,EAAwB3B,IAAOC,IAAV,oeA4BZ2B,UAhES,WAEpB,MAA0CC,oBAAS,GAAnD,mBAAO1B,EAAP,KAAsB2B,EAAtB,KAEMC,EAAWC,YAAYC,KAEvB7B,EAA2B,CAC7BQ,GAAI,qBACJC,GAAI,sBAMR,EAA8CgB,mBAAuB,MAArE,mBAAOxB,EAAP,KAAwBE,EAAxB,KAWA,OAVA2B,qBAAU,WACFV,aAAaW,QAAQ,oBACrB5B,EAAmBiB,aAAaW,QAAQ,sBAE7C,IAEHD,qBAAU,WACN3B,EAAmBwB,KACpB,CAACA,IAGA,eAACJ,EAAD,CAAuBX,UAAW,mBAAlC,UACI,qBAAKA,UAAU,uBAAuBM,QAAS,kBAAMQ,GAAiB,SAAAM,GAAI,OAAKA,MAA/E,SACI,sBAAMpB,UAAW,iBAAjB,SAAoCZ,EAAQC,OAEhD,cAAC,EAAD,CAAgBF,cAAeA,EAAeI,mBAAoBA,EAClDF,gBAAiBA,EAAiBD,QAASA,EAASE,eArB7B,CAC3C,qBAAO,KACP,qBAAO","file":"static/js/15.de9c3071.chunk.js","sourcesContent":["import React from 'react';\nimport styled from \"styled-components\";\nimport {LanguageMapType, LanguageType, ReverseLanguageMapType} from \"./ToolbarLanguage\";\nimport {useDispatch} from \"react-redux\";\nimport {changeLanguage} from \"../redux/actions/system-actions\";\nimport {useTranslation} from \"react-i18next\";\n\ninterface ChangeLanguageProps {\n    langMap: LanguageMapType\n    reverseLangMap: ReverseLanguageMapType\n    currentLanguage: LanguageType\n    setCurrentLanguage: (lang: LanguageType) => void\n    showLanguages: boolean\n}\n\nconst ChangeLanguage: React.FC<ChangeLanguageProps> = ({\n                                                           showLanguages,\n                                                           langMap,\n                                                           reverseLangMap,\n                                                           currentLanguage,\n                                                           setCurrentLanguage\n                                                       }) => {\n\n    const {t, i18n} = useTranslation()\n    const fullLangNames = {\n        ru: t('Русский'),\n        kk: t('Казахский'),\n    }\n\n    const dispatch = useDispatch()\n\n    const changeLang = (lang: LanguageType) => {\n        setCurrentLanguage(lang)\n        localStorage.setItem('currentLanguage', lang)\n        dispatch(changeLanguage(lang))\n    }\n\n    return (\n        <ChangeLanguageStyled className={!showLanguages ? ' hidden' : ''}>\n            {Object.keys(langMap).map((langKey, index) => {\n                return (\n                    <div onClick={() => changeLang(langKey as LanguageType)} key={index}\n                         className={\"language__item\" + (currentLanguage === langKey ? ' active' : '')}>\n                        <div className=\"language__item-code\"><span>{langMap[langKey as LanguageType]}</span></div>\n                        <div className=\"language__item-full\"><span>{fullLangNames[langKey as LanguageType]}</span></div>\n                    </div>\n                )\n            })}\n        </ChangeLanguageStyled>\n    );\n};\n\nconst ChangeLanguageStyled = styled.div`\n  width: 300px;\n  height: 200px;\n  background-color: transparent;\n  position: absolute;\n  top: -400%;\n  left: -375%;\n  z-index: 9999;\n  backdrop-filter: blur(3px);\n  transition: opacity 0.2s linear;\n\n  &.hidden {\n    opacity: 0;\n    width: 0;\n    height: 0;\n    visibility: hidden;\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(20, 21, 24, 1);\n    opacity: 0.8;\n    z-index: -1;\n  }\n\n  .language__item {\n    width: 100%;\n    padding: 1rem;\n    height: 50px;\n    z-index: 2;\n    color: var(--white-color);\n    display: flex;\n\n    > * {\n      display: flex;\n      align-items: center;\n    }\n\n    &:hover {\n      background: rgba(255, 255, 255, 0.05);\n    }\n\n    &.active {\n      background: #0077d3;\n    }\n\n    .language__item-code {\n      width: 20%;\n    }\n  }\n`\n\nexport default ChangeLanguage;","import React, {useEffect, useState} from 'react';\nimport styled from \"styled-components\";\nimport ChangeLanguage from \"./ChangeLanguage\";\nimport {useSelector} from \"react-redux\";\nimport {languageSelector} from \"../selectors/system-selectors\";\n\nexport type LanguageType = 'ru' | 'kk'\nexport type ReverseLanguageType = 'РУС' | 'КАЗ'\n\nexport type LanguageMapType = {\n    ru: ReverseLanguageType,\n    kk: ReverseLanguageType,\n}\n\nexport type ReverseLanguageMapType = {\n    'РУС': LanguageType,\n    'КАЗ': LanguageType,\n}\n\nconst ToolbarLanguage = () => {\n\n    const [showLanguages, setShowLanguages] = useState(false)\n\n    const language = useSelector(languageSelector)\n\n    const langMap: LanguageMapType = {\n        ru: 'РУС',\n        kk: 'КАЗ',\n    }\n    const reverseLangMap: ReverseLanguageMapType = {\n        'РУС': 'ru',\n        'КАЗ': 'kk',\n    }\n    const [currentLanguage, setCurrentLanguage] = useState<LanguageType>('ru')\n    useEffect(() => {\n        if (localStorage.getItem('currentLanguage')) {\n            setCurrentLanguage(localStorage.getItem('currentLanguage') as LanguageType)\n        }\n    }, [])\n\n    useEffect(() => {\n        setCurrentLanguage(language as LanguageType)\n    }, [language])\n\n    return (\n        <ToolbarLanguageStyled className={'toolbar-language'}>\n            <div className=\"toolbar-icon-wrapper\" onClick={() => setShowLanguages(prev => !prev)}>\n                <span className={'language__code'}>{langMap[currentLanguage]}</span>\n            </div>\n            <ChangeLanguage showLanguages={showLanguages} setCurrentLanguage={setCurrentLanguage}\n                            currentLanguage={currentLanguage} langMap={langMap} reverseLangMap={reverseLangMap}/>\n        </ToolbarLanguageStyled>\n    );\n};\n\nconst ToolbarLanguageStyled = styled.div`\n  position: relative;\n  color: var(--white-color);\n  text-align: center;\n  width: 5rem;\n  height: 100%;\n\n  .toolbar-icon-wrapper {\n    padding: 0.5rem 0.5rem;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n\n    &:hover {\n      background-color: var(--toolbar-bg-color);\n      filter: brightness(140%);\n    }\n\n    span {\n      width: 100%;\n      text-align: center;\n      display: inline;\n\n    }\n  }\n`\n\nexport default ToolbarLanguage;"],"sourceRoot":""}