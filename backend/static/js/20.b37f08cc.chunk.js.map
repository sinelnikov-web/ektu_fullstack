{"version":3,"sources":["components/Window.tsx"],"names":["Window","React","memo","windowContent","onFileClose","id","file","onWindowFocus","openedFilesCount","onFileMinimize","useState","topBarMouseDown","setTopBarMouseDown","caught","setCaught","top","setTop","left","setLeft","cursorX","setCursorX","cursorY","setCursorY","isActive","opening","setOpening","closing","setClosing","isVisible","fullScreen","setFullScreen","windowRef","useRef","FolderStyled","ref","draggable","onDragStart","e","clientX","clientY","setTimeout","target","classList","add","preventDefault","onDragEnd","prev","onDragOver","onMouseMove","moveWindow","onClick","zIndex","isFocusedOnWindow","onAnimationEnd","className","isMinimized","type","onMouseDown","onTouchMove","src","baseURL","icon","alt","title","tabIndex","styled","div","props"],"mappings":"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","file":"static/js/20.b37f08cc.chunk.js","sourcesContent":["import React, {DragEvent, MouseEvent, ReactElement, TouchEvent, useRef, useState} from 'react';\nimport styled from \"styled-components\";\nimport {FileType} from \"./Desktop\";\nimport {baseURL} from \"../api/base\";\n\n\ninterface WindowProps {\n    windowContent: ReactElement,\n    onFileClose: (id: number) => void\n    onFileMinimize: (id: number) => void\n    id: number\n    onWindowFocus: (id: number) => void\n    file: FileType\n    openedFilesCount: number\n}\n\nconst Window = React.memo<WindowProps>(({\n                                            windowContent,\n                                            onFileClose,\n                                            id,\n                                            file,\n                                            onWindowFocus,\n                                            openedFilesCount,\n                                            onFileMinimize\n                                        }) => {\n    const [topBarMouseDown, setTopBarMouseDown] = useState(false)\n    const [caught, setCaught] = useState(false)\n    const [top, setTop] = useState(50 + openedFilesCount * 10)\n    const [left, setLeft] = useState(50 + openedFilesCount * 10)\n    const [cursorX, setCursorX] = useState(0)\n    const [cursorY, setCursorY] = useState(0)\n    const [isActive, setIsActive] = useState(false)\n    const [opening, setOpening] = useState(true)\n    const [closing, setClosing] = useState(false)\n    const [isVisible, setIsVisible] = useState(true)\n    const [fullScreen, setFullScreen] = useState(false)\n    const windowRef = useRef<HTMLDivElement>(null)\n\n    const moveWindow = (e: MouseEvent<HTMLDivElement>) => {\n        if (caught) {\n            setCursorX(e.clientX)\n            setCursorY(e.clientY)\n            if (caught) {\n                setTop(prev => prev + (e.clientX - cursorX))\n                setLeft(prev => prev + (e.clientY - cursorY))\n            }\n        }\n\n    }\n\n    const catchWindow = (e: DragEvent<HTMLDivElement>) => {\n        onWindowFocus(id)\n        setFullScreen(false)\n        if (topBarMouseDown) {\n            setCursorX(e.clientX)\n            setCursorY(e.clientY)\n            setCaught(true)\n\n            // @ts-ignore\n            setTimeout(() => e.target.classList.add('hold'), 0)\n        } else {\n            e.preventDefault()\n        }\n    }\n\n    const throwWindow = (e: DragEvent<HTMLDivElement>) => {\n        setTop(prev => prev + (e.clientY - cursorY))\n        setLeft(prev => prev + (e.clientX - cursorX))\n        setCaught(false)\n        setTopBarMouseDown(false)\n    }\n\n    const catchMobileWindow = (e: TouchEvent<HTMLDivElement>) => {\n        // onWindowFocus(id)\n        // if (fullScreen) {\n        //     setFullScreen(false)\n        // }\n        // // @ts-ignore\n        // windowRef.current.style.top = top + (e.touches[0].clientY - cursorY) + 'px'\n        // // @ts-ignore\n        // windowRef.current.style.left = left + (e.touches[0].clientX - cursorX) + 'px'\n        // setTop(prev => prev + (e.touches[0].clientY - cursorY))\n        // setLeft(prev => prev + (e.touches[0].clientX - cursorX))\n        // setCursorX(e.touches[0].clientX)\n        // setCursorY(e.touches[0].clientY)\n        //\n        // setCaught(true)\n\n    }\n\n    const closeWindow = (e: MouseEvent<HTMLButtonElement>) => {\n        setClosing(true)\n        onFileClose(file.id)\n    }\n\n    const minimizeWindow = (e: MouseEvent<HTMLButtonElement>) => {\n        onFileMinimize(id)\n    }\n\n    const toggleFullScreenWindow = (e: MouseEvent<HTMLButtonElement>) => {\n        setFullScreen(prev => !prev)\n    }\n\n    return (\n        <FolderStyled\n            ref={windowRef}\n            draggable\n            onDragStart={catchWindow}\n            onDragEnd={throwWindow}\n            onDragOver={(e) => e.preventDefault()}\n            onMouseMove={(e) => moveWindow(e)}\n            onClick={(e) => onWindowFocus(id)}\n            top={top + 'px'}\n            left={left + 'px'}\n            zIndex={file.isFocusedOnWindow ? 1000 : 20}\n            fullScreen={fullScreen}\n            onAnimationEnd={() => {\n                setOpening(false)\n            }}\n            className={\n                'window' +\n                (isActive ? ' active' : '') +\n                (opening ? ' opening' : '') +\n                (closing ? ' closing' : '') +\n                (file.isMinimized ? ' minimized' : '') +\n                (!isVisible ? ' hidden' : '') +\n                (file.type === 'widget' ? ' widget' : '')\n            }\n        >\n            <div\n                className=\"window__top-bar top-bar\"\n                id={'top-bar'}\n                onMouseDown={() => setTopBarMouseDown(true)}\n                onTouchMove={catchMobileWindow}\n            >\n                <div className=\"top-bar__left-side\">\n                    <img src={baseURL + file.icon} alt=\"\" className=\"window__file-icon\"/>\n                    <span>{file.title}</span>\n                </div>\n                <div className=\"top-bar__right-side\">\n                    {file.type !== 'widget' && <>\n                        <button\n                            tabIndex={0}\n                            className=\"top-bar__btn top-bar__btn--wrap\"\n                            onClick={minimizeWindow}\n                        >\n                            <span></span>\n                        </button>\n                        <button\n                            tabIndex={0}\n                            className={`top-bar__btn top-bar__btn--resize`}\n                            onClick={toggleFullScreenWindow}\n                        >\n                            <span></span>\n                        </button>\n                    </>}\n                    <button\n                        tabIndex={0}\n                        className=\"top-bar__btn top-bar__btn--close\"\n                        onClick={closeWindow}\n                    >\n                        <span>&times;</span>\n                    </button>\n                </div>\n            </div>\n            <div className=\"content\">\n                {windowContent}\n            </div>\n        </FolderStyled>\n    );\n});\n\ninterface FolderStyleProps {\n    top: string\n    left: string\n    zIndex: number\n    fullScreen: boolean\n}\n\nconst FolderStyled = styled.div<FolderStyleProps>`\n  width: ${props => props.fullScreen ? '100vw' : '800px'};\n  height: ${props => props.fullScreen ? 'calc(100vh - 5rem)' : '600px'};\n  background-color: var(--white-color);\n  position: fixed;\n  top: ${props => props.fullScreen ? '0' : props.top};\n  left: ${props => props.fullScreen ? '0' : props.left};\n  z-index: ${props => props.zIndex};\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 0 4px black;\n  transition: all 0.3s linear;\n  \n  .window__file-icon {\n    width: 16px;\n    height: 16px;\n    margin-right: 0.6rem;\n  }\n\n  &.hidden {\n    display: none;\n  }\n\n  &.opening {\n    animation: 0.5s openWindow;\n  }\n\n  &.closing {\n    animation: 0.5s closeWindow;\n    opacity: 0;\n  }\n\n  &.minimized {\n    transform-origin: bottom;\n    animation: 0.5s minimizeWindow;\n    opacity: 0;\n    width: 0;\n    height: 0;\n\n    > * {\n      display: none;\n    }\n  }\n\n  @keyframes openWindow {\n    from {\n      transform: scale(0);\n    }\n    to {\n      transform: scale(1);\n    }\n  }\n  @keyframes closeWindow {\n    from {\n      transform: scale(1);\n      opacity: 1;\n    }\n    to {\n      transform: scale(0);\n      opacity: 0;\n    }\n  }\n  @keyframes minimizeWindow {\n    from {\n      transform: scale(1);\n    }\n    to {\n      transform: scale(0);\n    }\n  }\n\n  &.hold {\n    display: none;\n  }\n\n  &.widget {\n    width: auto;\n    height: auto;\n  }\n\n  .window__top-bar {\n    width: 100%;\n    height: 3rem;\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .top-bar__left-side {\n    font-size: 1.5rem;\n    display: flex;\n    align-items: center;\n    padding-left: 1rem;\n    span {\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      max-width: 150px;\n    }\n  }\n\n  .top-bar__right-side {\n    display: flex;\n  }\n\n  .top-bar__btn {\n    display: block;\n    height: 100%;\n    width: 4rem;\n    border: none;\n    outline: none;\n    background: transparent;\n    position: relative;\n    padding: 1rem;\n\n    &:focus {\n      background: rgba(0, 0, 0, 0.2);\n    }\n\n    &:hover {\n      background: rgba(0, 0, 0, 0.2);\n    }\n\n    &--close {\n      &:focus {\n        background: rgba(255, 0, 0, 1);\n        color: white;\n      }\n\n      &:hover {\n        background: rgba(255, 0, 0, 1);\n        color: white;\n      }\n    }\n  }\n\n  .top-bar__btn--wrap span {\n    position: absolute;\n    width: 40%;\n    height: 1px;\n    background-color: black;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  .top-bar__btn--resize span {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 10px;\n    height: 10px;\n    border: 1px solid black;\n  }\n\n  .top-bar__btn--close span {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    font-size: 3rem;\n    font-weight: 300;\n    transform: translate(-50%, -50%);\n  }\n\n  .content {\n    width: 100%;\n    height: calc(100% - 3rem);\n    overflow-y: auto;\n  }\n\n  @media (max-width: 823px) {\n    width: 100%;\n    height: calc(100% - 5rem);\n    top: 0;\n    left: 0;\n  }\n`\n\nexport default Window;"],"sourceRoot":""}